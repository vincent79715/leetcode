C++
Runtime: 0 ms, faster than 100.00% of C++ online submissions for First Missing Positive.
Memory Usage: 10.1 MB, less than 99.99% of C++ online submissions for First Missing Positive.

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) 
    {
        int L = nums.size(),t1=0,t2=0;
        for(int i=0;i<L;++i)
        {
            t1 = nums[i];
            while(t1>0 && t1<=L && nums[t1-1] != t1)
            {
                t2 = nums[t1-1];
                nums[t1-1] = t1;
                t1 = t2;
            }
        }
        for(int i = 0; i < L; ++ i)
            if(nums[i] != i + 1)
                return i + 1;
        
        return L+1;
    }
};
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
Python
Runtime: 20 ms, faster than 86.47% of Python online submissions for First Missing Positive.
Memory Usage: 13.5 MB, less than 26.58% of Python online submissions for First Missing Positive.

class Solution(object):
    def firstMissingPositive(self, nums):
        t1,t2,L = 0,0,len(nums)
        for i in range(L):
            t1 = nums[i]
            while(t1>0 and t1<=L and nums[t1-1] != t1):
                t2 = nums[t1-1];
                nums[t1-1] = t1;
                t1 = t2;
        for i in range(L):
            if(nums[i] != i + 1): return i + 1;
        return L+1;
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
C#
Runtime: 84 ms, faster than 95.58% of C# online submissions for First Missing Positive.
Memory Usage: 25.2 MB, less than 5.66% of C# online submissions for First Missing Positive.

public class Solution {
    public int FirstMissingPositive(int[] nums) 
    {
        int L = nums.Length,t1=0,t2=0;
        for(int i=0;i<L;++i)
        {
            t1 = nums[i];
            while(t1>0 && t1<=L && nums[t1-1] != t1)
            {
                t2 = nums[t1-1];
                nums[t1-1] = t1;
                t1 = t2;
            }
        }
        for(int i = 0; i < L; ++ i)
            if(nums[i] != i + 1)
                return i + 1;
        
        return L+1;
    }
}